#!/bin/sh

#
# Inspects branch name and checks if it contains a Jira ticket number (i.e. ABC-123).
# If yes, commit message will be automatically prepended with [ABC-123].
#
# Useful for looking through git history and relating a commit or group of commits
# back to a user story.
#

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

# Ensure BRANCH_NAME is not empty and is not in a detached HEAD state (i.e. rebase).
# SKIP_PREPARE_COMMIT_MSG may be used as an escape hatch to disable this hook,
# while still allowing other githooks to run.
if [ ! -z "$BRANCH_NAME" ] && [ "$BRANCH_NAME" != "HEAD" ] && [ "$SKIP_PREPARE_COMMIT_MSG" != 1 ]; then
  PREFIX_PATTERN='[A-Za-z]{2,5}[-_][0-9]{1,5}'

  if [[ $BRANCH_NAME =~ $PREFIX_PATTERN ]]; then
    PREFIX=${BASH_REMATCH[0]}

    # Upcase the PREFIX
    PREFIX=$(echo "$PREFIX" | tr '[:lower:]' '[:upper:]')

    PREFIX_IN_COMMIT=$(grep -c "$PREFIX" $COMMIT_MSG_FILE)

    # Ensure PREFIX exists in BRANCH_NAME and is not already present in the commit message
    if [[ -n "$PREFIX" ]] && ! [[ $PREFIX_IN_COMMIT -ge 1 ]]; then
      # sed -i.bak -e "1s~^~[$PREFIX] ~" $COMMIT_MSG_FILE # Prepend the PREFIX inline
      # sed -i.bak -e "1s~$~ [$PREFIX] ~" $COMMIT_MSG_FILE # Append the PREFIX inline

      # Append the PREFIX on a new line at the end of the commit message
      echo "" >> $COMMIT_MSG_FILE # Add a newline to ensure the PREFIX is on its own line
      echo "$PREFIX #in-progress" >> $COMMIT_MSG_FILE
    fi
  fi
fi
