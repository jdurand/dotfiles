#!/bin/bash

# tmux-session-manager: Comprehensive tmux session management with fuzzy finding
#
# Features:
# - Switch to active sessions (sorted by most recent, current session marked with →)
# - Kill sessions with Ctrl-x
# - Rename sessions with Ctrl-r
# - Start tmuxinator configs in background with Ctrl-s
# - Create new session with Ctrl-n
# - Built-in help with ? key
# - Popup interface within tmux, regular fzf outside tmux
# - Color-coded indicators: green dots for active, grey dots for tmuxinator configs

set -e

# Colors for output
readonly RED=$'\033[0;31m'
readonly GREEN=$'\033[1;32m'
readonly YELLOW=$'\033[1;33m'
readonly BLUE=$'\033[0;34m'
readonly DARK_GREY=$'\033[0;90m'
readonly NC=$'\033[0m' # No Color

# Check dependencies
check_dependencies() {
  local deps=("tmux" "fzf")
  local missing=()

  for dep in "${deps[@]}"; do
    if ! command -v "$dep" &> /dev/null; then
      missing+=("$dep")
    fi
  done

  if [[ ${#missing[@]} -gt 0 ]]; then
    echo -e "${RED}Missing dependencies: ${missing[*]}${NC}" >&2
    exit 1
  fi
}

# Get active tmux sessions sorted by activity (most recent first)
get_active_sessions() {
  tmux list-sessions -F "#{session_last_attached}:#{session_name}" 2>/dev/null | \
    sort -rn | cut -d: -f2 || true
}

# Get tmuxinator configurations
get_tmuxinator_configs() {
  if [[ -d "$HOME/.dotfiles/tmuxinator" ]]; then
    find "$HOME/.dotfiles/tmuxinator" -name "*.yml" -exec basename {} .yml \; | grep -v config
  fi
}

# Build selection list with status indicators
build_session_list() {
  local active_sessions
  local tmuxinator_configs
  local session_list=()
  local current_session=""

  # Get current session if inside tmux
  if [[ -n "${TMUX:-}" ]]; then
    current_session=$(tmux display-message -p "#{session_name}")
  fi

  # Get data
  active_sessions=$(get_active_sessions)
  tmuxinator_configs=$(get_tmuxinator_configs)

  # Add active sessions with indicator, excluding current session
  while IFS= read -r session; do
    if [[ -n "$session" && "$session" != "$current_session" ]]; then
      session_list+=("${GREEN}●${NC} $session")
    fi
  done <<< "$active_sessions"

  # Add current session at the end of active sessions if it exists
  if [[ -n "$current_session" ]]; then
    session_list+=("${GREEN}→${NC} $current_session")
  fi

  # Add tmuxinator configs, excluding those already active
  while IFS= read -r config; do
    if [[ -n "$config" ]] && ! echo "$active_sessions" | grep -q "^$config$"; then
      session_list+=("${DARK_GREY}●${NC} $config (tmuxinator)")
    fi
  done <<< "$tmuxinator_configs"

  printf '%s\n' "${session_list[@]}"
}

# Extract session name from selection
extract_session_name() {
  local selection="$1"
  echo "$selection" | sed -E 's/^[^●→]*[●→][^[:space:]]* ([^[:space:]]+).*/\1/'
}

# Check if session is active
is_session_active() {
  local session_name="$1"
  tmux has-session -t "$session_name" 2>/dev/null
}

# Kill session
kill_session() {
  local session_name="$1"
  if is_session_active "$session_name"; then
    tmux kill-session -t "$session_name" 2>/dev/null || true
  fi
}

# Rename session
rename_session() {
  local session_name="$1"
  if is_session_active "$session_name"; then
    tmux command-prompt -p "Rename session '$session_name' to:" \
      "rename-session -t '$session_name' '%%'" 2>/dev/null || true
  fi
}

# Create new session
create_new_session() {
  if [[ -n "${TMUX:-}" ]]; then
    # Create new session and switch to it
    local new_session_name
    new_session_name=$(tmux new-session -d -P -F "#{session_name}")
    tmux switch-client -t "$new_session_name" 2>/dev/null || true
  else
    tmux new-session
  fi
}

# Show help
show_help() {
  local help_text="Session Switcher Help:

Enter    - Switch to session
Ctrl-x   - Kill session
Ctrl-r   - Rename session
Ctrl-s   - Start in background
Ctrl-n   - Create new session
?        - Show this help
Esc      - Exit"

  if [[ -n "${TMUX:-}" ]]; then
    tmux display-popup -E -w 50% -h 40% "echo '$help_text'; echo ''; echo 'Press any key to continue...'; read -n1" 2>/dev/null || true
  else
    echo "$help_text"
    echo ""
    read -p "Press Enter to continue..." -r
  fi
}

# Start session without switching
start_session() {
  local session_name="$1"
  local selection="$2"

  if echo "$selection" | grep -q "(tmuxinator)"; then
    if command -v tmuxinator &> /dev/null; then
      tmuxinator start "$session_name" --no-attach 2>/dev/null || true
    fi
  fi
}

# Switch to or start session
switch_to_session() {
  local session_name="$1"
  local selection="$2"

  if is_session_active "$session_name"; then
    if [[ -n "${TMUX:-}" ]]; then
      tmux switch-client -t "$session_name"
    else
      tmux attach-session -t "$session_name"
    fi
  elif echo "$selection" | grep -q "(tmuxinator)"; then
    if command -v tmuxinator &> /dev/null; then
      tmuxinator start "$session_name"
      # Switch to the newly created session
      if [[ -n "${TMUX:-}" ]]; then
        tmux switch-client -t "$session_name" 2>/dev/null || true
      fi
    else
      echo "${RED}tmuxinator not found${NC}" >&2
      exit 1
    fi
  else
    echo "${RED}Unknown session type${NC}" >&2
    exit 1
  fi
}

# Main function
main() {
  check_dependencies

  local session_list
  session_list=$(build_session_list)

  if [[ -z "$session_list" ]]; then
    exit 0
  fi

  # Use fzf for selection (with tmux popup if inside tmux)
  local result
  if [[ -n "${TMUX:-}" ]]; then
    # Inside tmux - use popup with temporary files for input/output
    local input_file output_file
    input_file=$(mktemp)
    output_file=$(mktemp)
    echo "$session_list" > "$input_file"

    tmux display-popup -E -w 60% -h 40% \
      "cat '$input_file' | fzf --prompt='Select session (? for help): ' --ansi --reverse --border --expect=ctrl-x,ctrl-r,ctrl-s,ctrl-n --preview='echo \"Session Switcher Help:\"; echo \"\"; echo \"Enter    - Switch to session\"; echo \"Ctrl-x   - Kill session\"; echo \"Ctrl-r   - Rename session\"; echo \"Ctrl-s   - Start in background\"; echo \"Ctrl-n   - Create new session\"; echo \"?        - Show this help\"; echo \"Esc      - Exit\"' --preview-window=hidden --bind='?:toggle-preview' > '$output_file'" 2>/dev/null || true

    result=$(cat "$output_file" 2>/dev/null || true)
    rm -f "$input_file" "$output_file"
  else
    # Outside tmux - regular fzf
    result=$(echo "$session_list" | fzf \
      --height=40% \
      --border \
      --prompt="Select session (? for help): " \
      --preview='echo "Session Switcher Help:"; echo ""; echo "Enter    - Switch to session"; echo "Ctrl-x   - Kill session"; echo "Ctrl-r   - Rename session"; echo "Ctrl-s   - Start in background"; echo "Ctrl-n   - Create new session"; echo "?        - Show this help"; echo "Esc      - Exit"' \
      --preview-window=hidden \
      --ansi \
      --expect=ctrl-x,ctrl-r,ctrl-s,ctrl-n \
      --bind='?:toggle-preview' 2>/dev/null || true)
  fi

  if [[ -n "$result" ]]; then
    local key
    local selection
    key=$(echo "$result" | head -n1)
    selection=$(echo "$result" | tail -n1)

    if [[ -n "$selection" ]]; then
      local session_name
      session_name=$(extract_session_name "$selection")
  
      case "$key" in
        "ctrl-x")
          kill_session "$session_name"
          # Restart the switcher to show updated list
          exec "$0" "$@"
          ;;
        "ctrl-r")
          rename_session "$session_name"
          # Restart the switcher to show updated list
          exec "$0" "$@"
          ;;
        "ctrl-s")
          start_session "$session_name" "$selection"
          # Restart the switcher to show updated list
          exec "$0" "$@"
          ;;
        "ctrl-n")
          create_new_session
          ;;
        "")
          # Enter key - normal switch
          switch_to_session "$session_name" "$selection"
          ;;
      esac
    fi
  fi
}

# Run if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
